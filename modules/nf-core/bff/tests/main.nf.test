nextflow_process {

    name "Test Process BFF"
    script "../main.nf"
    process "BFF"

    tag "modules"
    tag "modules_nfcore"
    tag "bff"

    def testDataPath = "/Users/luisheinzlmeier/Desktop/test_data/hto"

    test("hto_matrix - combined - preprocessing") {
        when {
            process {
                """
                input[0] = [
                    [ id:'test'], // meta map
                    "$testDataPath",
                    "COMBINED",
                    "TRUE"

                ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }
    }

    test("hto_matrix - raw - preprocessing") {
        when {
            process {
                """
                input[0] = [
                    [ id:'test'], // meta map
                    "$testDataPath",
                    "RAW",
                    "TRUE"
                ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }

    }

    test("hto_matrix - combined - no preprocessing") {
        when {
            process {
                """
                input[0] = [
                    [ id:'test'], // meta map
                    "$testDataPath",
                    "COMBINED",
                    "FALSE"
                ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }

    }

    test("hto_matrix - combined - preprocessing - stub") {

        options "-stub"

        when {
            process {
                """
                input[0] = [
                    [ id:'test'], // meta map
                    "$testDataPath",
                    "COMBINED",
                    "TRUE"

                ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }
    }

}

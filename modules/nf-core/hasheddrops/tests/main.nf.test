nextflow_process {

    name "Test Process HASHEDDROPS"
    script "../main.nf"
    process "HASHEDDROPS"

    tag "modules"
    tag "modules_nfcore"
    tag "hasheddrops"


// file(params.modules_testdata_base_path + '/genomics/homo_sapiens/10xgenomics/cellranger/hashing_demultiplexing/htodemux.rds', checkIfExists: true)
        test("hto_matrix - runEmptyDrops:false - rna_matrix") {
        when {
            process {
                """
                input[0] = [
                    [ id:'test'], // meta map
                    "/Users/luisheinzlmeier/Desktop/test_data/hto",
                    "FALSE",
                    "/Users/luisheinzlmeier/Desktop/test_data/rna",
                ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }

    }



    test("hto_matrix - runEmptyDrops:true - rna_matrix:false") {
        when {
            process {
                """
                input[0] = [
                    [ id:'test'], // meta map
                    "/Users/luisheinzlmeier/Desktop/test_data/hto",
                    "TRUE",
                    "/Users/luisheinzlmeier/Desktop/test_data/rna",
                ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }

    }



    test("hto_matrix - runEmptyDrops - rna_matrix") {

        options "-stub"

        when {
            process {
                """
                input[0] = [
                    [ id:'test'], // meta map
                    "/Users/luisheinzlmeier/Desktop/test_data/hto",
                    "TRUE",
                    "/Users/luisheinzlmeier/Desktop/test_data/rna",
                ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }

    }

}


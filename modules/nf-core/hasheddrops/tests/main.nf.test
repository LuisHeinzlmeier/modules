nextflow_process {

    name "Test Process HASHEDDROPS"
    script "../main.nf"
    process "HASHEDDROPS"

    tag "modules"
    tag "modules_nfcore"
    tag "hasheddrops"
<<<<<<< HEAD
<<<<<<< HEAD
    tag "untar"

    test("hto_matrix - runEmptyDrops:false - rna_matrix") {

        setup {
            run("UNTAR") {
                script "modules/nf-core/untar/main.nf"
                process {
                    """
                    input[0] = Channel.of(
                        [ [id: 'hto'], file(params.modules_testdata_base_path + "/genomics/homo_sapiens/10xgenomics/cellranger/hashing_demultiplexing/hto.tar.gz") ],
                        [ [id: 'rna'], file(params.modules_testdata_base_path + "/genomics/homo_sapiens/10xgenomics/cellranger/hashing_demultiplexing/rna.tar.gz") ]
                    )
                    """
                }
            }
        }
=======

=======
    tag "untar"
>>>>>>> 8824e4694 (use remove data-sets)

<<<<<<< HEAD
        // TODO nf-core: If you are created a test for a chained module
        // (the module requires running more than one process to generate the required output)
        // add the 'setup' method here.
        // You can find more information about how to use a 'setup' method in the docs (https://nf-co.re/docs/contributing/modules#steps-for-creating-nf-test-for-chained-modules).
>>>>>>> 11d1bc9b0 (save changes)
=======
// file(params.modules_testdata_base_path + '/genomics/homo_sapiens/10xgenomics/cellranger/hashing_demultiplexing/htodemux.rds', checkIfExists: true)
        test("hto_matrix - runEmptyDrops:false - rna_matrix") {

        setup {
            run("UNTAR") {
                script "modules/nf-core/untar/main.nf"
            input:
            Channel.of(
                [ [], file(params.modules_testdata_base_path + "/.../hto.tar.gz") ],
                [ [], file(params.modules_testdata_base_path + "/.../rna.tar.gz") ]
            )
            }
        }

        when {
            process {
                """
                input[0] = [
                    [ id:'test'], // meta map
                    UNTAR.out.untar[0].map{ meta, files -> files },
                    "FALSE",
                    UNTAR.out.untar[1].map{ meta, files -> files },
                ]
                """
            }
        }
>>>>>>> a916275c7 (improvements)

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }

    }

    test("hto_matrix - runEmptyDrops:true - rna_matrix") {
        when {
            process {
                """
<<<<<<< HEAD
                input[0] = UNTAR.out.untar.filter{ meta, _f -> meta.id == 'hto' }
                                        .combine(UNTAR.out.untar.filter{ meta, _f -> meta.id == 'rna' })
                                        .map{ _meta_hto, hto, _meta_rna, rna -> [[id: 'test'], hto, "FALSE", rna] }
=======
                input[0] = [
                    [ id:'test'], // meta map
                    "/Users/luisheinzlmeier/Desktop/test_data/hto",
                    "FALSE",
                    "/Users/luisheinzlmeier/Desktop/test_data/rna",
                ]
>>>>>>> 11d1bc9b0 (save changes)
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
<<<<<<< HEAD
<<<<<<< HEAD
=======
                //TODO nf-core: Add all required assertions to verify the test output.
                // See https://nf-co.re/docs/contributing/tutorials/nf-test_assertions for more information and examples.
>>>>>>> 11d1bc9b0 (save changes)
=======
>>>>>>> a916275c7 (improvements)
            )
        }

    }

<<<<<<< HEAD
<<<<<<< HEAD
    test("hto_matrix - runEmptyDrops:true - rna_matrix") {

        setup {
            run("UNTAR") {
                script "modules/nf-core/untar/main.nf"
                process {
                    """
                    input[0] = Channel.of(
                        [ [id: 'hto'], file(params.modules_testdata_base_path + "/genomics/homo_sapiens/10xgenomics/cellranger/hashing_demultiplexing/hto.tar.gz") ],
                        [ [id: 'rna'], file(params.modules_testdata_base_path + "/genomics/homo_sapiens/10xgenomics/cellranger/hashing_demultiplexing/rna.tar.gz") ]
                    )
                    """
                }
            }
        }

        when {
            process {
                """
                input[0] = UNTAR.out.untar.filter{ meta, _f -> meta.id == 'hto' }
                                        .combine(UNTAR.out.untar.filter{ meta, _f -> meta.id == 'rna' })
                                        .map{ _meta_hto, hto, _meta_rna, rna -> [[id: 'test'], hto, "TRUE", rna] }
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }

    }

<<<<<<< HEAD
    test("hto_matrix - runEmptyDrops:true - rna_matrix - stub") {

        options "-stub"

        setup {
            run("UNTAR") {
                script "modules/nf-core/untar/main.nf"
                process {
                    """
                    input[0] = Channel.of(
                        [ [id: 'hto'], file(params.modules_testdata_base_path + "/genomics/homo_sapiens/10xgenomics/cellranger/hashing_demultiplexing/hto.tar.gz") ],
                        [ [id: 'rna'], file(params.modules_testdata_base_path + "/genomics/homo_sapiens/10xgenomics/cellranger/hashing_demultiplexing/rna.tar.gz") ]
                    )
                    """
                }
            }
        }

        when {
            process {
                """
                input[0] = UNTAR.out.untar.filter{ meta, _f -> meta.id == 'hto' }
                                        .combine(UNTAR.out.untar.filter{ meta, _f -> meta.id == 'rna' })
                                        .map{ _meta_hto, hto, _meta_rna, rna -> [[id: 'test'], hto, "TRUE", rna] }
=======
    // TODO nf-core: Change the test name preferably indicating the test-data and file-format used but keep the " - stub" suffix.
    test("sarscov2 - bam - stub") {
=======


    test("hto_matrix - runEmptyDrops - rna_matrix") {
>>>>>>> a916275c7 (improvements)
=======
    test("hto_matrix - runEmptyDrops - rna_matrix - stub ") {
>>>>>>> b6a7e9106 (some changes)

        options "-stub"

        when {
            process {
                """
                input[0] = [
                    [ id:'test'], // meta map
                    "/Users/luisheinzlmeier/Desktop/test_data/hto",
                    "TRUE",
                    "/Users/luisheinzlmeier/Desktop/test_data/rna",
                ]
>>>>>>> 11d1bc9b0 (save changes)
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
<<<<<<< HEAD
<<<<<<< HEAD
=======
                //TODO nf-core: Add all required assertions to verify the test output.
>>>>>>> 11d1bc9b0 (save changes)
=======
>>>>>>> a916275c7 (improvements)
            )
        }

    }

}

